- add LuaLS documentation for the main structure of the standard

- path-getting functions now reside in a sub-table where other files can access them.
	- also exposed the root directory path where game-specific folders are placed, for crossgame module.

- re-order and simplify assorted functions for simplicity and readability
	- various string manipulations changed from manual loops to pattern-replace
	- images-in-use copying altered and partially simplified.
		- function previously used for finding paths of images to be exported simplified. instead of a list of data structures it now returns a set of simple filenames.
	- buildnumber removed from metadata exported to /Shared/. version check for image copy now more correctly uses current pdx metadata.

- data validation for achievement structure polished and increased. validation routines split into separate functions for readability.

- made version string reconfigurable for multi-edition games

- added optional default icon fields to base-level game data.

- added achievement completion fields for multi-step achievements.
	- added achievements.advanceTo(id, to): sets achievement progress to given number, clamped between 0 and max. grants achievement if at max.
	- added achievements.advance(id, by): advances achievement by the given amount, clamped between 0 and max. grants achievement if at max
	- Save file changed to store both granted achievements and achievement completion data. Old saves are no longer compatible, but this is an alpha, so that's to be expected.

- added score_weight field for use in calculating progress to 100% completion of a game.

- refactored toast_graphics.lua
	- achievements.lua must be explictly imported by the user. this is to make sure the user doesn't need to follow any specific structure when adding the files to their project.
	- module is now namespaced into `achievements.toast_graphics`
	- instead of loading images ahead of time, the default animation loads images according to achievement data fields as needed
		- NOTE: consider function to prune images from memory? they're not needed often, but they could add up.
	- the default animation now respects the new options for game-wide default icons.
	- instead of duplicating the main api, the module now decorates `achievement.initialize`, `achievement.grant`, and `achievement.revoke` with new functionality. this is easier to maintain/extend and keeps the api intact.

- began splitting crossgame functionality into a separate file.
	- NOTE: this will likely need to be fleshed out further as an achievement viewer is developed.
	- added function which lists ids of all games with achievement files
	- added remote image loading helper. may require iteration later
	- crossgame data now includes `.completionPercentage`, which is how close the player is to 100% as an integer 0..1

- bumped versions and removed prototype tag

- moved files into a /achievements library folder
	- renamed `toast_graphics.lua` to `graphics.lua`
	- renamed the internal table to `achievements.graphics` to match
	- added my animation edit of Modem's icons to `/achievements/graphics/`
	- added an `/achievements/all.lua` file which imports everything else for ease of use

- cleaned up graphics section a little bit
	- toast coroutines now wait starting after the last one finishes instead of after the last one begins, meaning they no longer draw over each other.
	- added `achievements.graphics.toasts` table to hold any default toast animations packed in with the library
	- added `achievements.graphics.default_toast` value, which sets the default animation used when none is provided

- @gurtt: change data key names to camelCase
- @bremco: embed Modem's fancy default assets in graphics.lua as base64

intended upcoming tasks:
- [ ] make my experimental icon animations actually look good
- [ ] quickly write up a couple more animations
- [ ] update readme and the like
- [x] add function to test game to procedurally generate a bunch of dummy data for different "games"
- [x] simplest possible gridview-based achievement viewer
